const ProductModel = require("../models/Product");
const cloudinary = require("../utils/cloudinary"); 

// üìå CREATE: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
exports.createProduct = async (req, res) => {
  try {
      const { productName, productDescription, categoryId, packSize, productStatus, barcodePack, barcodeUnit, quantity, purchasePrice, sellingPricePerUnit, sellingPricePerPack, expirationDate } = req.body;

      if (!req.file) {
          return res.status(400).json({ message: "Please upload a product image" });
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥
      const nameExists = await ProductModel.findOne({ productName });
      if (nameExists) {
        return res.status(400).json({ message: "‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß" });
      }
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö barcodePack ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö barcodePack ‡∏´‡∏£‡∏∑‡∏≠ barcodeUnit ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô
      if (barcodePack) {
        const barcodePackExists = await ProductModel.findOne({
          $or: [
            { barcodePack },
            { barcodeUnit: barcodePack }
          ]
        });
        if (barcodePackExists) {
          return res.status(400).json({ message: "Barcode ‡πÅ‡∏û‡πá‡∏Ñ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß (‡∏≠‡∏≤‡∏à‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö barcode ‡πÅ‡∏û‡πá‡∏Ñ‡∏´‡∏£‡∏∑‡∏≠ barcode ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô)" });
        }
      }
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö barcodeUnit ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö barcodePack ‡∏´‡∏£‡∏∑‡∏≠ barcodeUnit ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô
      if (barcodeUnit) {
        const barcodeUnitExists = await ProductModel.findOne({
          $or: [
            { barcodePack: barcodeUnit },
            { barcodeUnit: barcodeUnit }
          ]
        });
        if (barcodeUnitExists) {
          return res.status(400).json({ message: "Barcode ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß (‡∏≠‡∏≤‡∏à‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö barcode ‡πÅ‡∏û‡πá‡∏Ñ‡∏´‡∏£‡∏∑‡∏≠ barcode ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô)" });
        }
      }

      const newProduct = new ProductModel({
          productName,
          productDescription,
          productImage: req.file.path,  // ‡πÉ‡∏ä‡πâ URL ‡∏à‡∏≤‡∏Å Cloudinary
          categoryId,
          packSize,
          productStatus,
          barcodePack,
          barcodeUnit,
          quantity,
          purchasePrice,
          sellingPricePerUnit,
          sellingPricePerPack,
          expirationDate
      });

      await newProduct.save();
      return res.status(201).json({ message: "Product created successfully", product: newProduct });
  } catch (error) {
      // handle duplicate key error (MongoDB)
      if (error.code === 11000) {
        return res.status(400).json({ message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î)" });
      }
      return res.status(500).json({ message: error.message });
  }
};

// üìå READ: ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
exports.getAllProducts = async (req, res) => {
  try {
    const products = await ProductModel.find()
      .populate("categoryId", "categoryName")
      .populate("productStatuses", "statusName statusColor");
    res.json(products);
  } catch (error) {
    console.log(error.message);
    res.status(500).send({
      message: "Error occurred while fetching products.",
    });
  }
};

// üìå READ: ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÇ‡∏î‡∏¢ ID
exports.getProductById = async (req, res) => {
  const { id } = req.params;
  try {
    const product = await ProductModel.findById(id)
      .populate("categoryId", "categoryName")
      .populate("productStatuses", "statusName statusColor");

    if (!product) {
      return res.status(404).send({
        message: "Product not found.",
      });
    }

    res.json(product);
  } catch (error) {
    console.log(error.message);
    res.status(500).send({
      message: "Error occurred while fetching product by ID.",
    });
  }
};

// üìå UPDATE: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
exports.updateProductImage = async (req, res) => {
  try {
    const { id } = req.params;
    const product = await ProductModel.findById(id);

    if (!product) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" });
    }

    if (!req.file) {
      return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û" });
    }

    // ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏≤‡∏Å Cloudinary
    if (product.productImage) {
      const publicId = product.productImage.split('/').pop().split('.')[0];
      await cloudinary.uploader.destroy(`products/${publicId}`);
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà
    const updatedProduct = await ProductModel.findByIdAndUpdate(
      id,
      { productImage: req.file.path },
      { new: true }
    ).populate("categoryId", "categoryName")
     .populate("productStatuses", "statusName statusColor");

    res.status(200).json({
      message: "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      product: updatedProduct
    });
  } catch (error) {
    console.error("Error updating product image:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û" });
  }
};

// üìå UPDATE: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
exports.updateProductData = async (req, res) => {
  try {
    const { id } = req.params;
    const updateData = { ...req.body };

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥ (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)
    if (updateData.productName) {
      const nameExists = await ProductModel.findOne({ productName: updateData.productName, _id: { $ne: id } });
      if (nameExists) {
        return res.status(400).json({ message: "‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß" });
      }
    }
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö barcodePack ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö barcodePack ‡∏´‡∏£‡∏∑‡∏≠ barcodeUnit ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)
    if (updateData.barcodePack) {
      const barcodePackExists = await ProductModel.findOne({
        $or: [
          { barcodePack: updateData.barcodePack },
          { barcodeUnit: updateData.barcodePack }
        ],
        _id: { $ne: id }
      });
      if (barcodePackExists) {
        return res.status(400).json({ message: "Barcode ‡πÅ‡∏û‡πá‡∏Ñ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß (‡∏≠‡∏≤‡∏à‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö barcode ‡πÅ‡∏û‡πá‡∏Ñ‡∏´‡∏£‡∏∑‡∏≠ barcode ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô)" });
      }
    }
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö barcodeUnit ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö barcodePack ‡∏´‡∏£‡∏∑‡∏≠ barcodeUnit ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)
    if (updateData.barcodeUnit) {
      const barcodeUnitExists = await ProductModel.findOne({
        $or: [
          { barcodePack: updateData.barcodeUnit },
          { barcodeUnit: updateData.barcodeUnit }
        ],
        _id: { $ne: id }
      });
      if (barcodeUnitExists) {
        return res.status(400).json({ message: "Barcode ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß (‡∏≠‡∏≤‡∏à‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö barcode ‡πÅ‡∏û‡πá‡∏Ñ‡∏´‡∏£‡∏∑‡∏≠ barcode ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô)" });
      }
    }

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà
    if (req.file) {
      const product = await ProductModel.findById(id);
      if (!product) {
        return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" });
      }

      // ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏≤‡∏Å Cloudinary ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
      if (product.productImage) {
        const publicId = product.productImage.split('/').pop().split('.')[0];
        await cloudinary.uploader.destroy(`products/${publicId}`);
      }

      updateData.productImage = req.file.path;
    }

    const updatedProduct = await ProductModel.findByIdAndUpdate(
      id,
      updateData,
      { new: true }
    ).populate("categoryId", "categoryName")
     .populate("productStatuses", "statusName statusColor");

    if (!updatedProduct) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" });
    }

    res.status(200).json({
      message: "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      product: updatedProduct
    });
  } catch (error) {
    if (error.code === 11000) {
      return res.status(400).json({ message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î)" });
    }
    console.error("Error updating product:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
  }
};

// üìå DELETE: ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
exports.deleteProductById = async (req, res) => {
  const { id } = req.params;

  try {
    const product = await ProductModel.findById(id);
    if (!product) {
      return res.status(404).send({ message: "Product not found." });
    }

    // üìå ‡∏î‡∏∂‡∏á `public_id` ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å URL Cloudinary ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏£‡∏π‡∏õ
    const imageUrl = product.productImage;
    if (imageUrl) {
      const publicId = imageUrl.split("/").pop().split(".")[0]; // ‡∏î‡∏∂‡∏á public_id ‡∏Ç‡∏≠‡∏á Cloudinary
      await cloudinary.uploader.destroy(`products/${publicId}`); // ‡∏•‡∏ö‡∏à‡∏≤‡∏Å Cloudinary
    }

    // üìå ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await ProductModel.findByIdAndDelete(id);
    res.status(200).json({ message: "Product deleted successfully." });
  } catch (error) {
    console.log(error.message);
    res.status(500).send({ message: "Error occurred while deleting product." });
  }
};

// üìå READ: ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÇ‡∏î‡∏¢ barcodePack ‡∏´‡∏£‡∏∑‡∏≠ barcodeUnit
exports.getProductByBarcode = async (req, res) => {
  const { barcode } = req.params; // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ barcode ‡∏à‡∏≤‡∏Å URL

  try {
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÇ‡∏î‡∏¢ barcode (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ barcodePack ‡∏´‡∏£‡∏∑‡∏≠ barcodeUnit ‡πÑ‡∏î‡πâ)
    const product = await ProductModel.findOne({
      $or: [{ barcodePack: barcode }, { barcodeUnit: barcode }] // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏° barcodePack ‡∏´‡∏£‡∏∑‡∏≠ barcodeUnit
    })
      .populate("categoryId", "categoryName")
      .populate("productStatuses", "statusName statusColor");

    if (!product) {
      return res.status(404).send({
        message: "Product not found.",
      });
    }

    res.json(product);
  } catch (error) {
    console.log(error.message);
    res.status(500).send({
      message: "Error occurred while fetching product by barcode.",
    });
  }
};
