const OrderModel = require("../models/Order");
const CartModel = require("../models/Cart");
const ProductModel = require("../models/Product");
const PromotionModel = require("../models/Promotion");
const { checkAndAddStock } = require("./purchaseOrder.controller");

exports.createOrder = async (req, res) => {
  try {
    const { userName, paymentMethod, cash_received } = req.body;

    // ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const cartItems = await CartModel.find({ userName });
    if (cartItems.length === 0) {
      return res.status(400).json({ message: "Cart is empty" });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    for (const item of cartItems) {
      const product = await ProductModel.findById(item.productId);
      if (!product) {
        return res.status(404).json({ message: `Product ${item.productName} not found` });
      }

      let requiredQuantity = item.quantity;
      // ‡∏ñ‡πâ‡∏≤ pack ‡πÄ‡∏õ‡πá‡∏ô true ‡∏Ñ‡∏π‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏î‡πâ‡∏ß‡∏¢ packSize ‡∏Å‡πà‡∏≠‡∏ô
      if (item.pack) {
        requiredQuantity *= product.packSize;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å
      if (product.quantity < requiredQuantity) {
        return res.status(400).json({ message: `Not enough stock for ${item.productName}` });
      }
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô
    let subtotal = 0;
    let totalDiscount = 0;
    const products = [];
    const appliedPromotions = [];
    
    for (const item of cartItems) {
      const product = await ProductModel.findById(item.productId);
      if (!product) {
        return res.status(404).json({ message: `Product ${item.productName} not found` });
      }

      let requiredQuantity = item.quantity;
      if (item.pack) {
        requiredQuantity *= product.packSize;
      }

      // ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏∏‡∏ô‡∏à‡∏≤‡∏Å ProductModel
      const purchasePrice = item.pack 
        ? product.purchasePrice * product.packSize  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏û‡πá‡∏Ñ ‡∏Ñ‡∏π‡∏ì packSize
        : product.purchasePrice; // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
      const currentDate = new Date();
      const activePromotion = await PromotionModel.findOne({
        productId: item.productId,
        validityStart: { $lte: currentDate },
        validityEnd: { $gte: currentDate }
      });

      let finalPrice = item.price;
      let itemDiscount = 0;

      if (activePromotion) {
        // ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô
        finalPrice = activePromotion.discountedPrice;
        itemDiscount = (item.price - activePromotion.discountedPrice) * item.quantity;
        totalDiscount += itemDiscount;

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
        appliedPromotions.push({
          productId: activePromotion._id,
          promotionName: activePromotion.promotionName,
          discountedPrice: activePromotion.discountedPrice,
          originalPrice: item.price,
          discountAmount: itemDiscount
        });
      }

      subtotal += finalPrice * item.quantity;
      products.push({
        productId: item.productId,
        image: item.image,
        productName: item.name,
        quantity: item.quantity,
        purchasePrice: purchasePrice,
        sellingPricePerUnit: finalPrice,
        pack: item.pack,
        originalPrice: item.price,
        discountAmount: itemDiscount,
        packSize: product.packSize
      });

      // ‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
      await ProductModel.findByIdAndUpdate(item.productId, {
        $inc: { quantity: -requiredQuantity },
      });

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å
      await checkAndAddStock(item.productId);
    }

    const total = subtotal;
    let change = 0;

    if (paymentMethod === "Cash") {
      if (cash_received < total) {
        return res.status(400).json({ message: "Cash received is not enough" });
      }
      change = cash_received - total;
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
    const newOrder = new OrderModel({
      userName,
      products,
      subtotal,
      total,
      promotionId: appliedPromotions,
      paymentMethod,
      cash_received: paymentMethod === "Cash" ? cash_received : 0,
      change,
      orderDate: new Date(),
    });

    await newOrder.save();

    // ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
    await CartModel.deleteMany({ userName });

    res.status(201).json({ 
      message: "Order created successfully", 
      order: newOrder,
      totalDiscount: totalDiscount,
      appliedPromotions: appliedPromotions
    });
  } catch (error) {
    console.error("Error creating order:", error);
    res.status(500).json({ message: "Internal Server Error" });
  }
};

exports.getOrders = async (req, res) => {
  try {
    const orders = await OrderModel.find().sort({ createdAt: -1 });
    res.status(200).json(orders);
  } catch (error) {
    res.status(500).json({ message: "Error retrieving orders", error });
  }
};

exports.getOrderById = async (req, res) => {
  try {
    const order = await OrderModel.findById(req.params.id);
    if (!order) {
      return res.status(404).json({ message: "Order not found" });
    }
    res.status(200).json(order);
  } catch (error) {
    res.status(500).json({ message: "Error retrieving order", error });
  }
};

exports.deleteOrder = async (req, res) => {
  try {
    const order = await OrderModel.findById(req.params.id);
    if (!order) {
      return res.status(404).json({ message: "Order not found" });
    }

    // ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    for (const item of order.products) {
      await ProductModel.findByIdAndUpdate(item.productId, {
        $inc: { quantity: item.quantity }
      });
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∑‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å
      await checkAndAddStock(item.productId);
    }

    // ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
    await OrderModel.findByIdAndDelete(req.params.id);

    res.status(200).json({ message: "Order deleted and stock updated" });
  } catch (error) {
    res.status(500).json({ message: "Error deleting order", error });
  }
};

exports.updateOrderDetail = async (req, res) => {
  try {
    const { productId, quantity, sellingPricePerUnit, pack } = req.body;

    const order = await OrderModel.findById(req.params.id);
    if (!order) {
      return res.status(404).json({ message: "Order not found" });
    }

    if (productId) {
      const product = await ProductModel.findById(productId);
      if (!product) {
        return res.status(404).json({ message: `Product not found` });
      }

      const oldItem = order.products.find(p => p.productId.toString() === productId.toString());
      if (!oldItem) {
        return res.status(404).json({ message: `Product not found in this order` });
      }

      // üî¥ ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô pack (‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏™‡∏°‡∏≠)
      const previousPack = oldItem.pack;

      let newQuantity = quantity !== undefined ? quantity : oldItem.quantity;

      let oldTotalQuantity = previousPack ? oldItem.quantity * product.packSize : oldItem.quantity;
      let newTotalQuantity = previousPack ? newQuantity * product.packSize : newQuantity;
      let quantityDiff = newTotalQuantity - oldTotalQuantity;

      // ‡∏ñ‡πâ‡∏≤‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏≠
      if (quantityDiff > 0 && product.quantity < quantityDiff) {
        return res.status(400).json({ message: `Not enough stock for ${product.productName}` });
      }

      // ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
      await ProductModel.findByIdAndUpdate(productId, {
        $inc: { quantity: -quantityDiff }
      });

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÅ‡∏ï‡πà‡∏´‡πâ‡∏≤‡∏°‡πÅ‡∏Å‡πâ pack)
      oldItem.quantity = newQuantity;
      oldItem.sellingPricePerUnit = sellingPricePerUnit || oldItem.sellingPricePerUnit;

      let subtotal = 0;
      order.products.forEach(item => {
        subtotal += item.sellingPricePerUnit * item.quantity;
      });

      order.subtotal = subtotal;
      order.total = subtotal;

      await order.save();

      return res.status(200).json({ message: "Order updated and stock adjusted", order });
    }

    res.status(400).json({ message: "No valid update parameters provided" });
  } catch (error) {
    console.error("Error updating order:", error);
    res.status(500).json({ message: "Error updating order", error });
  }
};

exports.updateOrderStatus = async (req, res) => {
  try {
    const { orderStatus } = req.body;
    const order = await OrderModel.findById(req.params.id);
    
    if (!order) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠" });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    const validStatuses = ["‡∏Ç‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", "‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏ï‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢"];
    if (!validStatuses.includes(orderStatus)) {
      return res.status(400).json({ 
        message: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", 
        validStatuses 
      });
    }

    // ‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏õ‡πá‡∏ô "‡∏Ç‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" ‡πÅ‡∏•‡∏∞‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
    if (order.orderStatus === "‡∏Ç‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" && (orderStatus === "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å" || orderStatus === "‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")) {
      // ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
      for (const item of order.products) {
        let quantityToReturn = item.quantity;
        if (item.pack) {
          const product = await ProductModel.findById(item.productId);
          if (product) {
            quantityToReturn *= product.packSize;
          }
        }
        await ProductModel.findByIdAndUpdate(item.productId, {
          $inc: { quantity: quantityToReturn }
        });
      }
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    order.orderStatus = orderStatus;
    await order.save();

    res.status(200).json({ 
      message: "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", 
      order 
    });
  } catch (error) {
    console.error("Error updating order status:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" });
  }
};

exports.createDisposeOrder = async (req, res) => {
  try {
    const { userName, products, orderStatus, paymentMethod, subtotal, total } = req.body;
    if (!userName || !products || !Array.isArray(products) || products.length === 0) {
      return res.status(400).json({ message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
    }
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡∏°‡∏µ productId ‡πÅ‡∏•‡∏∞ quantity
    let calculatedSubtotal = 0;
    let calculatedProducts = [];
    for (const item of products) {
      if (!item.productId || !item.quantity) {
        return res.status(400).json({ message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
      }
      // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      const product = await ProductModel.findById(item.productId);
      if (!product) {
        return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
      }
      const purchasePrice = product.purchasePrice;
      const productTotal = purchasePrice * item.quantity;
      calculatedSubtotal += productTotal;
      // ‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 0
      await ProductModel.findByIdAndUpdate(item.productId, {
        quantity: 0
      });
      calculatedProducts.push({
        ...item,
        purchasePrice,
        sellingPricePerUnit: (orderStatus === '‡∏ï‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢' ? purchasePrice : 0),
        originalPrice: 0,
        discountAmount: 0,
      });
    }
    const newOrder = new OrderModel({
      userName,
      products: calculatedProducts,
      subtotal: calculatedSubtotal,
      total: calculatedSubtotal,
      paymentMethod: paymentMethod || '‡∏ï‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢',
      orderStatus: orderStatus || '‡∏ï‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢',
      orderDate: new Date(),
    });
    await newOrder.save();
    res.status(201).json({ message: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", order: newOrder });
  } catch (error) {
    console.error("Error creating dispose order:", error);
    res.status(500).json({ message: "Internal Server Error" });
  }
};
